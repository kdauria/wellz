% Generated by roxygen2 (4.0.2): do not edit by hand
\name{search}
\alias{search}
\title{Search a wellList for certain wells}
\usage{
search(x, ...)
}
\arguments{
\item{x}{a \code{wellList} object}

\item{compstr}{a string used to search for compounds}

\item{filename}{a string}

\item{code}{a string}

\item{ID}{a string}

\item{controls}{a \code{logical}}
}
\description{
This function takes several parameters (see arguments) and
returns wells that match \emph{all} of the arguments.
}
\details{
The \code{filename} and \code{code} arguments are the most straightforward.
Wells with the matching filenames or codes/locations are found.
\code{controls=TRUE} also finds wells with no compounds, only solvent.

The \code{compstr} argument (the COMPound STRing) is the most flexible.
It parses a string describing one or more concentrations and returns
wells that meet those requirements. This is best described by example.
For instance, the string \code{"CompoundA"} will return all
wells that have "CompoundA". Next, the concentration of compounds
can be set. For instance, \code{"CompoundA [10]"} will find wells
with CompoundA at a concentration of 10. \code{"CompoundA [10-1000]"}
will find all wells with CompoundA at or above a concentration of 10 and at or
below a concentration of 1000. The logical operaturs \code{&}, \code{|}, and
\code{!} can be used in front of compound names. For instance,
\code{"CompoundA [10-1000] & !CompoundB"} will find all wells with
CompoundA between the specificed concnetrations that also do
not have CompoundB.

\code{ID} specifies the name of the action (and so the Solution)
 to look for in each well. If an action with the name does not exist,
 \code{NA} is the result.

The final output from matching all of these compounds is a
logical vector the same length as the number of wells in
the \code{wellList} object. The \code{TRUE} elements indicate
which well met the required parameters
}

